{"version":3,"sources":["components/appHeader.js","components/monthBox.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","state","value","onlyCurrent","handleChange","event","setState","target","searchTerm","handleClick","bind","assertThisInitialized","react_default","a","createElement","Sticky","Grid","Row","stretched","Column","floated","width","Header","as","Input","icon","placeholder","onChange","Button","toggle","active","onClick","React","Component","MonthBox","_this$props","name","Segment","inverted","color","App","searchPhrase","iconDirectory","_ref","_this2","window","location","hostname","className","columns","padded","appHeader","Item","Group","divided","foods","filter","x","toLowerCase","indexOf","availability","Date","getMonth","map","food","key","Image","src","Content","Meta","buyDescription","Description","storeDescription","Extra","monthBox","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81bb4017.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Grid, Input, Sticky, Header, Button } from 'semantic-ui-react'\r\n\r\nclass AppHeader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onSearchChange = props.onSearchChange;\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  \r\n  onSearchChange = null;\r\n  state = {\r\n    value: '',\r\n    onlyCurrent: false\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n    this.onSearchChange({searchTerm: event.target.value, \r\n      onlyCurrent: this.state.onlyCurrent});\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({ onlyCurrent: !this.state.onlyCurrent });\r\n    this.onSearchChange({searchTerm: this.state.value, \r\n      onlyCurrent: !this.state.onlyCurrent});\r\n  }\r\n\r\n  render() {\r\n    //const { name } = this.props;\r\n    return (\r\n      <Sticky>\r\n        <Grid>\r\n          <Grid.Row stretched>\r\n            <Grid.Column floated='left' width={2}>\r\n              <Header as='h3'>Kalendarz sezonowy</Header>\r\n            </Grid.Column>\r\n            <Grid.Column floated='right' width={11}>\r\n              <Input icon='search' placeholder='Wyszukaj...'\r\n                value={this.state.value} onChange={this.handleChange} />\r\n            </Grid.Column>\r\n            <Grid.Column floated='right' width={3}>\r\n              <Button toggle active={this.state.onlyCurrent} onClick={this.handleClick}>\r\n                Tylko aktualnie dostępne\r\n      </Button>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Sticky>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react'\r\n\r\nclass MonthBox extends React.Component {\r\n    render() {\r\n        const { name, active } = this.props;\r\n        if (active) {\r\n            return <Segment inverted color=\"green\">{name}</Segment>;\r\n        } else {\r\n            return <Segment>{name}</Segment>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MonthBox;","import React from 'react';\nimport './App.css';\nimport foods from './foods.json';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Item, Grid } from 'semantic-ui-react';\nimport AppHeader from './components/appHeader';\nimport MonthBox from './components/monthBox';\n\nclass App extends React.Component {\n\n  state = {\n    searchPhrase: \"\",\n    iconDirectory: \"\",\n    onlyCurrent: false\n  }\n\n  onSearchChange = ({ searchTerm, onlyCurrent }) => {\n    this.setState({\n      searchPhrase: searchTerm,\n      onlyCurrent: onlyCurrent\n    })\n  }\n\n  render() {\n    let iconDirectory = '/fresh-calendar-web/icons/';\n    if (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") {\n      iconDirectory = '/icons/';\n    }\n \n    return (\n      <div className=\"App\">\n        <Grid columns={1} padded>\n          <Grid.Column>\n            <AppHeader onSearchChange={this.onSearchChange}></AppHeader>\n            \n            <Item.Group divided>\n              {\n                foods.filter((x) => x.name.toLowerCase().indexOf(this.state.searchPhrase.toLowerCase()) !== -1 && (!this.state.onlyCurrent || !!x.availability[new Date().getMonth()]))\n                  .map(function (food) {\n                  return  <Item key={food.name}>\n                    <Item.Image src={iconDirectory + food.icon} />\n\n                    <Item.Content>\n                      <Item.Header as='a'>{food.name}</Item.Header>\n                      <Item.Meta>\n                        <span className='cinema'>\n                          {food.buyDescription}\n                        </span>\n                      </Item.Meta>\n                      <Item.Description>{food.storeDescription}</Item.Description>\n                      <Item.Extra>\n                        <Grid columns={6}>\n                          <Grid.Column><MonthBox name=\"Styczeń\" active={!!food.availability[0]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Luty\" active={!!food.availability[1]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Marzec\" active={!!food.availability[2]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Kwiecień\" active={!!food.availability[3]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Maj\" active={!!food.availability[4]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Czerwiec\" active={!!food.availability[5]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Lipiec\" active={!!food.availability[6]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Sierpień\" active={!!food.availability[7]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Wrzesień\" active={!!food.availability[8]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Październik\" active={!!food.availability[9]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Listopad\" active={!!food.availability[10]}></MonthBox></Grid.Column>\n                          <Grid.Column><MonthBox name=\"Grudzień\" active={!!food.availability[11]}></MonthBox></Grid.Column>\n                        </Grid>\n                      </Item.Extra>\n                    </Item.Content>\n                  </Item>\n                    ;\n                })}\n            </Item.Group>\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}