{"version":3,"sources":["components/appHeader.js","components/monthBox.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","state","value","onlyCurrent","modalOpen","handleChange","event","setState","target","searchTerm","handleClick","handleOpen","handleClose","bind","assertThisInitialized","iconDirectory","window","location","hostname","react_default","a","createElement","Menu","fixed","stackable","Container","Item","as","header","Image","size","src","style","marginRight","wide","flexGrow","Input","icon","placeholder","onChange","Button","toggle","active","onClick","Modal","trigger","open","onClose","Header","content","Content","href","Actions","color","Icon","name","React","Component","MonthBox","_this$props","Segment","inverted","App","searchPhrase","_ref","_this2","className","Grid","columns","padded","Column","appHeader","Group","divided","foods","filter","x","toLowerCase","indexOf","availability","Date","getMonth","map","food","key","Meta","buyDescription","Description","storeDescription","Extra","doubling","monthBox","number","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.61f311bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Menu, Image, Container, Input, Button, Modal, Header, Icon } from 'semantic-ui-react'\r\n\r\nclass AppHeader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onSearchChange = props.onSearchChange;\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  \r\n  onSearchChange = null;\r\n  state = {\r\n    value: '',\r\n    onlyCurrent: false,\r\n    modalOpen: false\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n    this.onSearchChange({searchTerm: event.target.value, \r\n      onlyCurrent: this.state.onlyCurrent});\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({ onlyCurrent: !this.state.onlyCurrent });\r\n    this.onSearchChange({searchTerm: this.state.value, \r\n      onlyCurrent: !this.state.onlyCurrent});\r\n  }\r\n\r\n  handleOpen = () => this.setState({ modalOpen: true })\r\n\r\n  handleClose = () => this.setState({ modalOpen: false })\r\n\r\n  render() {\r\n\r\n    let iconDirectory = '/fresh-calendar-web';\r\n    if (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") {\r\n      iconDirectory = '';\r\n    }\r\n    //const { name } = this.props;\r\n    return (\r\n      <Menu fixed='top' stackable>\r\n      <Container>\r\n        <Menu.Item as='a' header>\r\n          <Image size='mini' src={ iconDirectory + '/icon.svg'} style={{ marginRight: '1.5em' }} />\r\n          Kalendarz sezonowy\r\n        </Menu.Item>\r\n        <Menu.Item wide=\"true\" style={{flexGrow:1}}>\r\n          <Input icon='search' placeholder='Wyszukaj...'\r\n                 value={this.state.value} onChange={this.handleChange}\r\n                  />\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Button toggle active={this.state.onlyCurrent} onClick={this.handleClick}\r\n          style={{marginRight: \"5px\"}}>\r\n                    Tylko aktualnie dostÄ™pne\r\n          </Button>\r\n          <Modal trigger={<Button onClick={this.handleOpen}>?</Button>} size='small'\r\n            open={this.state.modalOpen}\r\n            onClose={this.handleClose}>\r\n            <Header icon='archive' content='Informacje' />\r\n            <Modal.Content>\r\n              {/* <h4>Kontakt:</h4>\r\n              <p>\r\n                Wszelkie pytanie lub sugestie prosze przyÅ‚aÄ‡ mailowo: <a href=\"mailto:aa@aa.pl\">...</a>\r\n              </p> */}\r\n\r\n              <p>\r\n                Grafiki pochodzÄ… z:\r\n              </p>\r\n              <ul>\r\n                <li><a href=\"https://www.flaticon.com/\">FlatIcon</a></li>\r\n                <li><a href=\"https://thenounproject.com/\">Noun Project</a></li>\r\n              </ul>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n              <Button color='green' onClick={this.handleClose}>\r\n                <Icon name='checkmark' /> Ok\r\n              </Button>\r\n            </Modal.Actions>\r\n          </Modal>\r\n        </Menu.Item>\r\n      </Container>\r\n</Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react'\r\n\r\nclass MonthBox extends React.Component {\r\n    render() {\r\n        const { name, active } = this.props;\r\n\r\n        if (active) {\r\n            return <Segment inverted color=\"green\">\r\n                {name}\r\n            </Segment>;\r\n        } else {\r\n            return <Segment>{name}</Segment>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MonthBox;","import React from 'react';\r\nimport './App.css';\r\nimport foods from './foods.json';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Item, Grid } from 'semantic-ui-react';\r\nimport AppHeader from './components/appHeader';\r\nimport MonthBox from './components/monthBox';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    searchPhrase: \"\",\r\n    iconDirectory: \"\",\r\n    onlyCurrent: false\r\n  }\r\n\r\n  onSearchChange = ({ searchTerm, onlyCurrent }) => {\r\n    this.setState({\r\n      searchPhrase: searchTerm,\r\n      onlyCurrent: onlyCurrent\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let iconDirectory = '/fresh-calendar-web/icons/';\r\n    if (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") {\r\n      iconDirectory = '/icons/';\r\n    }\r\n \r\n    return (\r\n      <div className=\"App\">\r\n        <Grid columns={1} padded>\r\n          <Grid.Column>\r\n            <AppHeader onSearchChange={this.onSearchChange}></AppHeader>\r\n            \r\n            <Item.Group divided className=\"content\">\r\n              {\r\n                foods.filter((x) => x.name.toLowerCase().indexOf(this.state.searchPhrase.toLowerCase()) !== -1 && (!this.state.onlyCurrent || !!x.availability[new Date().getMonth()]))\r\n                  .map(function (food) {\r\n                  return  <Item key={food.name}>\r\n                    <Item.Image src={iconDirectory + food.icon} size=\"small\"/>\r\n\r\n                    <Item.Content>\r\n                      <Item.Header as='a'>{food.name}</Item.Header>\r\n                      <Item.Meta>\r\n                        <span className='cinema'>\r\n                          {food.buyDescription}\r\n                        </span>\r\n                      </Item.Meta>\r\n                      <Item.Description>{food.storeDescription}</Item.Description>\r\n                      <Item.Extra>\r\n                        <Grid columns={6} doubling className=\"calendar\">\r\n                          <Grid.Column><MonthBox name=\"StyczeÅ„\" active={!!food.availability[0]} number={0}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"Luty\" active={!!food.availability[1]} number={1}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"Marzec\" active={!!food.availability[2]} number={2}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"KwiecieÅ„\" active={!!food.availability[3]} number={3}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"Maj\" active={!!food.availability[4]} number={4}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"Czerwiec\" active={!!food.availability[5]} number={5}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"Lipiec\" active={!!food.availability[6]} number={6}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"SierpieÅ„\" active={!!food.availability[7]} number={7}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"WrzesieÅ„\" active={!!food.availability[8]} number={8}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"PaÅºdziernik\" active={!!food.availability[9]} number={9}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"Listopad\" active={!!food.availability[10]} number={10}></MonthBox></Grid.Column>\r\n                          <Grid.Column><MonthBox name=\"GrudzieÅ„\" active={!!food.availability[11]} number={11}></MonthBox></Grid.Column>\r\n                        </Grid>\r\n                      </Item.Extra>\r\n                    </Item.Content>\r\n                  </Item>\r\n                    ;\r\n                })}\r\n            </Item.Group>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}