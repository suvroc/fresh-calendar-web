{"version":3,"sources":["components/foodItem/foodItem.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","react_default","a","createElement","Image","src","App","className","Grid","columns","padded","Column","Item","Group","divided","foods","map","food","icon","Content","Header","as","name","Meta","buyDescription","Description","Extra","color","availability","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2kBAEuBA,IAAMC,2CCKXC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,IAAI,0CAmDdC,MAlDf,WACE,OACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACnBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GAClBT,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,KAEDV,EAAAC,EAAAC,cAACS,EAAA,EAAKC,MAAN,CAAYC,SAAO,GAKhBC,EAAMC,IAAI,SAASC,GACP,OAAOhB,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACPX,EAAAC,EAAAC,cAACS,EAAA,EAAKR,MAAN,CAAYC,IAAM,6BAA+BY,EAAKC,OAEtDjB,EAAAC,EAAAC,cAACS,EAAA,EAAKO,QAAN,KACElB,EAAAC,EAAAC,cAACS,EAAA,EAAKQ,OAAN,CAAaC,GAAG,KAAKJ,EAAKK,MAC1BrB,EAAAC,EAAAC,cAACS,EAAA,EAAKW,KAAN,KACEtB,EAAAC,EAAAC,cAAA,QAAMI,UAAU,UACbU,EAAKO,iBAGVvB,EAAAC,EAAAC,cAACS,EAAA,EAAKa,YAAN,UACAxB,EAAAC,EAAAC,cAACS,EAAA,EAAKc,MAAN,KACEzB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,QAAS,EAAGK,SAAO,GACvBb,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,gBACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,QACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,UACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,iBACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,OACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,YACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,UACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,iBACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,iBACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,GAAK,QAAU,IAAvD,mBACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,IAAM,QAAU,IAAxD,YACA3B,EAAAC,EAAAC,cAACK,EAAA,EAAKG,OAAN,CAAagB,MAASV,EAAKW,aAAa,IAAM,QAAU,IAAxD,4BChCNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.130cd8d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass FoodItem extends React.Component {\r\n    render() {\r\n      const { name } = this.props\r\n      const imgUrl = `https://api.adorable.io/avatars/55/${name}.png`;\r\n      return (\r\n        <li className=\"item\">\r\n          <img src={imgUrl} alt=\"ddd\" className=\"ui mini rounded image\" />\r\n          <div className=\"content\">\r\n            <h4 className=\"header\">{name}</h4>\r\n          </div>\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default FoodItem;","import React from 'react';\nimport './App.css';\nimport foods from './foods.json';\nimport FoodItem from './components/foodItem/foodItem'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Icon, Button, Item, Image, Label, Grid } from 'semantic-ui-react'\n\nconst paragraph = <Image src='/images/wireframe/short-paragraph.png' />\nfunction App() {\n  return (\n    <div className=\"App\">\n<Grid columns={1} padded>\n      <Grid.Column>\n\n     <Item.Group divided>\n    \n  \n  \n      {\n        foods.map(function(food){\n                    return <Item>\n                    <Item.Image src={ '/fresh-calendar-web/icons/' + food.icon } />\n              \n                    <Item.Content>\n                      <Item.Header as='a'>{food.name}</Item.Header>\n                      <Item.Meta>\n                        <span className='cinema'>\n                          {food.buyDescription}\n                        </span>\n                      </Item.Meta>\n                      <Item.Description>a</Item.Description>\n                      <Item.Extra>\n                        <Grid columns={6} divided>\n                          <Grid.Column color={!!food.availability[0] ? 'green' : ''}>Styczeń</Grid.Column>\n                          <Grid.Column color={!!food.availability[1] ? 'green' : ''}>Luty</Grid.Column>\n                          <Grid.Column color={!!food.availability[2] ? 'green' : ''}>Marzec</Grid.Column>\n                          <Grid.Column color={!!food.availability[3] ? 'green' : ''}>Kwiecień</Grid.Column>\n                          <Grid.Column color={!!food.availability[4] ? 'green' : ''}>Maj</Grid.Column>\n                          <Grid.Column color={!!food.availability[5] ? 'green' : ''}>Czerwiec</Grid.Column>\n                          <Grid.Column color={!!food.availability[6] ? 'green' : ''}>Lipiec</Grid.Column>\n                          <Grid.Column color={!!food.availability[7] ? 'green' : ''}>Sieprień</Grid.Column>\n                          <Grid.Column color={!!food.availability[8] ? 'green' : ''}>Wrzesień</Grid.Column>\n                          <Grid.Column color={!!food.availability[9] ? 'green' : ''}>Październk</Grid.Column>\n                          <Grid.Column color={!!food.availability[10] ? 'green' : ''}>Listopad</Grid.Column>\n                          <Grid.Column color={!!food.availability[11] ? 'green' : ''}>Grudzień</Grid.Column>\n                        </Grid>\n                      </Item.Extra>\n                    </Item.Content>\n                  </Item>\n                    ;\n                  })}\n                  </Item.Group>\n            </Grid.Column>\n  </Grid>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}